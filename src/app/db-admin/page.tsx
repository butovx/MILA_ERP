"use client";

import { useState } from "react";
import Link from "next/link";

interface SqlResult {
  success: boolean;
  message: string;
  result?: any;
  error?: any;
}

export default function DbAdminPage() {
  const [sqlQuery, setSqlQuery] = useState<string>("");
  const [result, setResult] = useState<SqlResult | null>(null);
  const [loading, setLoading] = useState(false);

  // Примеры SQL-запросов
  const sqlExamples = [
    {
      name: "Создать таблицу todos",
      query: `CREATE TABLE IF NOT EXISTS todos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  completed BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);`,
    },
    {
      name: "Добавить тестовые данные",
      query: `INSERT INTO todos (title, description, completed)
VALUES 
  ('Изучить Next.js', 'Разобраться с серверными компонентами и роутингом', false),
  ('Настроить Supabase', 'Создать таблицы и настроить авторизацию', true),
  ('Реализовать UI', 'Создать компоненты интерфейса с использованием Tailwind CSS', false)
ON CONFLICT (id) DO NOTHING;`,
    },
    {
      name: "Посмотреть список таблиц",
      query: `SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
ORDER BY table_name;`,
    },
    {
      name: "Создать функцию exec_sql",
      query: `CREATE OR REPLACE FUNCTION public.exec_sql(query TEXT) 
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  result JSONB;
  start_time TIMESTAMPTZ;
  execution_time INT;
  affected_rows INT;
BEGIN
  -- Записываем время начала выполнения
  start_time := clock_timestamp();
  
  -- Выполняем запрос
  EXECUTE query;
  GET DIAGNOSTICS affected_rows = ROW_COUNT;
  
  -- Вычисляем время выполнения в миллисекундах
  execution_time := EXTRACT(EPOCH FROM (clock_timestamp() - start_time)) * 1000;
  
  -- Формируем результат
  result := jsonb_build_object(
    'success', true,
    'affected_rows', affected_rows,
    'execution_time_ms', execution_time
  );
  
  RETURN result;
EXCEPTION WHEN OTHERS THEN
  result := jsonb_build_object(
    'success', false,
    'error', SQLERRM,
    'error_detail', SQLSTATE
  );
  
  RETURN result;
END;
$$;`,
    },
  ];

  const executeQuery = async () => {
    if (!sqlQuery.trim()) return;

    setLoading(true);
    try {
      const response = await fetch("/api/db/query", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ query: sqlQuery }),
      });

      const data = await response.json();
      setResult(data);
    } catch (error: any) {
      setResult({
        success: false,
        message: "Ошибка при выполнении запроса",
        error: error.message,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-6xl mx-auto py-8 px-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Администрирование базы данных</h1>
        <Link
          href="/db-status"
          className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
        >
          Статус БД
        </Link>
      </div>

      <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-4 mb-6">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg
              className="h-5 w-5 text-yellow-400"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          <div className="ml-3">
            <p className="text-sm text-yellow-700 dark:text-yellow-300">
              <strong>Внимание:</strong> Эта страница предназначена только для
              администраторов. Выполнение SQL-запросов может изменить схему базы
              данных и привести к потере данных.
            </p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">SQL-запрос</h2>
              <textarea
                value={sqlQuery}
                onChange={(e) => setSqlQuery(e.target.value)}
                className="w-full h-64 font-mono p-4 border border-gray-300 dark:border-gray-700 rounded-md text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-900"
                placeholder="Введите SQL-запрос..."
              />
              <div className="mt-4 flex justify-end">
                <button
                  onClick={executeQuery}
                  disabled={loading || !sqlQuery.trim()}
                  className="inline-flex justify-center items-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-300"
                >
                  {loading ? "Выполнение..." : "Выполнить запрос"}
                </button>
              </div>
            </div>
          </div>

          {result && (
            <div className="mt-6 bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
              <div className="p-6">
                <h2 className="text-xl font-semibold mb-4">Результат</h2>
                <div
                  className={`rounded-md p-4 ${
                    result.success
                      ? "bg-green-50 dark:bg-green-900/30 text-green-800 dark:text-green-300"
                      : "bg-red-50 dark:bg-red-900/30 text-red-800 dark:text-red-300"
                  }`}
                >
                  <p className="font-medium">{result.message}</p>
                </div>
                {result.error && (
                  <div className="mt-4 bg-red-50 dark:bg-red-900/20 p-4 rounded-md overflow-auto">
                    <pre className="text-red-800 dark:text-red-300 whitespace-pre-wrap text-sm">
                      {JSON.stringify(result.error, null, 2)}
                    </pre>
                  </div>
                )}
                {result.result && (
                  <div className="mt-4 bg-gray-50 dark:bg-gray-900/50 p-4 rounded-md overflow-auto">
                    <pre className="text-gray-800 dark:text-gray-300 whitespace-pre-wrap text-sm">
                      {JSON.stringify(result.result, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        <div>
          <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">Примеры запросов</h2>
              <div className="space-y-4">
                {sqlExamples.map((example, index) => (
                  <button
                    key={index}
                    onClick={() => setSqlQuery(example.query)}
                    className="block w-full text-left px-4 py-2 text-sm font-medium text-gray-800 dark:text-gray-200 bg-gray-50 dark:bg-gray-900/30 hover:bg-gray-100 dark:hover:bg-gray-900/60 rounded-md"
                  >
                    {example.name}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6">
        <Link
          href="/"
          className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
        >
          &larr; На главную
        </Link>
      </div>
    </div>
  );
}
